'use strict';

var _require = require('../loadQuery'),
  useTrackLoadQueryInRender = _require.useTrackLoadQueryInRender;
var useMemoOperationDescriptor = require('../useMemoOperationDescriptor');
var useRelayEnvironment = require('../useRelayEnvironment');
var getQueryResultOrFetchQuery = require('./getQueryResultOrFetchQuery_REACT_CACHE');
var useFragmentInternal = require('./useFragmentInternal_REACT_CACHE');
var _require2 = require('react'),
  useEffect = _require2.useEffect;
function useLazyLoadQuery_REACT_CACHE(gqlQuery, variables, options) {
  var _options$networkCache;
  useTrackLoadQueryInRender();
  var environment = useRelayEnvironment();
  var queryOperationDescriptor = useMemoOperationDescriptor(gqlQuery, variables, (_options$networkCache = options === null || options === void 0 ? void 0 : options.networkCacheConfig) !== null && _options$networkCache !== void 0 ? _options$networkCache : {
    force: true
  });
  var _getQueryResultOrFetc = getQueryResultOrFetchQuery(environment, queryOperationDescriptor, {
      fetchPolicy: options === null || options === void 0 ? void 0 : options.fetchPolicy,
      renderPolicy: options === null || options === void 0 ? void 0 : options.UNSTABLE_renderPolicy,
      fetchKey: options === null || options === void 0 ? void 0 : options.fetchKey
    }),
    queryResult = _getQueryResultOrFetc[0],
    effect = _getQueryResultOrFetc[1];
  useEffect(effect);
  var fragmentNode = queryResult.fragmentNode,
    fragmentRef = queryResult.fragmentRef;
  return useFragmentInternal(fragmentNode, fragmentRef, 'useLazyLoadQuery()', {
    fetchPolicy: options === null || options === void 0 ? void 0 : options.fetchPolicy,
    networkCacheConfig: options === null || options === void 0 ? void 0 : options.networkCacheConfig
  });
}
module.exports = useLazyLoadQuery_REACT_CACHE;